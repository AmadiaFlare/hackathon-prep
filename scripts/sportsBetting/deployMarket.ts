import hre, { run } from "hardhat";
import fs from "fs";
import prompts from "prompts";
import { SportsMarketInstance } from "../../typechain-types";

const SportsMarket = artifacts.require("SportsMarket");

// This function now fetches all MLB games for `today`.
async function fetchGameByDate() {
    // Get today's date in YYYY-MM-DD format
    const today = new Date().toISOString().slice(0, 10);
    const url = `https://www.thesportsdb.com/api/v1/json/123/eventsday.php?d=${today}`;

    console.log(`Fetching MLB games for today (${today}) from: ${url}`);

    const response = await fetch(url);
    if (!response.ok) {
        throw new Error(`Failed to fetch data from API. Status: ${response.status}`);
    }

    const data = await response.json();

    if (!data.events || data.events.length === 0) {
        throw new Error(`No games found for ${today}.`);
    }

    // Let the user choose which game to create a market for
    const choices = data.events.map((event: any) => ({
        title: `${event.strEvent} (ID: ${event.idEvent})`,
        value: event.idEvent,
    }));

    const { selectedEventId } = await prompts({
        type: 'select',
        name: 'selectedEventId',
        message: 'Which game would you like to create a market for?',
        choices,
    });

    const selectedEvent = data.events.find((e: any) => e.idEvent === selectedEventId);

    if (!selectedEvent) {
        throw new Error("Invalid selection.");
    }

    console.log(`Selected event: ${selectedEvent.strEvent}`);

    // Use an artificial timestamp to ensure the market is open for betting
    const nowInSeconds = Math.floor(Date.now() / 1000);
    const testEventTimestamp = nowInSeconds + 3600; // 1 hour from now

    console.log(`\n*** DEPLOYMENT NOTE ***`);
    console.log(`Real event time: ${new Date(new Date(`${selectedEvent.strTimestamp}+00:00`).getTime()).toUTCString()}`);
    console.log(`Using artificial timestamp for deployment: ${new Date(testEventTimestamp * 1000).toUTCString()}`);
    console.log(`********************\n`);

    return {
        matchId: parseInt(selectedEvent.idEvent, 10),
        homeTeamName: selectedEvent.strHomeTeam,
        awayTeamName: selectedEvent.strAwayTeam,
        eventTimestamp: testEventTimestamp,
    };
}

async function main() {
    console.log("--- Step 1: Fetching Game Data ---");
    const gameDetails = await fetchGameByDate();

    console.log(`\n--- Step 2: Deploying SportsMarket Contract ---`);
    console.log(`Deploying market for match: ${gameDetails.homeTeamName} vs ${gameDetails.awayTeamName}`);
    console.log(`Match ID: ${gameDetails.matchId}`);
    console.log(`Event Start Timestamp (for contract): ${new Date(gameDetails.eventTimestamp * 1000).toUTCString()}`);

    const args: any[] = [
        gameDetails.matchId,
        gameDetails.homeTeamName,
        gameDetails.awayTeamName,
        gameDetails.eventTimestamp,
    ];

    const sportsMarket: SportsMarketInstance = await SportsMarket.new(...args);
    
    console.log(`\nSportsMarket contract deployed to: ${sportsMarket.address} on ${hre.network.name}`);

    // --- Step 3: Updating Configuration File ---
    const configContent = `// This file is auto-generated by deployMarket.ts
// It stores the contract address and match ID for other scripts to use.

export const marketAddress = "${sportsMarket.address}";
export const matchId = ${gameDetails.matchId};
`;
    fs.writeFileSync("scripts/sportsBetting/config.ts", configContent);
    console.log("Configuration file 'scripts/sportsBetting/config.ts' updated successfully.");

    // --- Step 4: Verifying Contract ---
    try {
        console.log("\nVerifying contract on block explorer...");
        await run("verify:verify", {
            address: sportsMarket.address,
            constructorArguments: args,
        });
        console.log("Contract verified successfully.");
    } catch (e: any) {
        if (e.message.toLowerCase().includes("already verified")) {
            console.log("Contract is already verified.");
        } else {
            console.error("Error verifying contract:", e.message);
        }
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });