import hre, { ethers, run } from "hardhat";
import fs from "fs";
import { SportsMarketInstance } from "../../typechain-types";
import { sleep } from "../utils/core";

const SportsMarket = artifacts.require("SportsMarket");

// TheSportsDB API MLB ID
const MLB_LEAGUE_ID = "4424";

async function fetchNextMlbGame() {

    const url = `https://www.thesportsdb.com/api/v1/json/123/eventsnextleague.php?id=${MLB_LEAGUE_ID}`;
    console.log(`Fetching upcoming games from: ${url}`);

    const response = await fetch(url);
    if (!response.ok) {
        throw new Error(`Failed to fetch data from API. Status: ${response.status}`);
    }

    const data = await response.json();

    if (!data.events || data.events.length === 0) {
        throw new Error(`No upcoming MLB games found for league ID ${MLB_LEAGUE_ID}.`);
    }

    // Always select the first upcoming event, even if it has already started.
    const nextEvent = data.events[0];
    console.log(`Fetched event: ${nextEvent.strEvent}`);

    // --- TESTING MODIFICATION ---
    // Instead of using the real timestamp, we will create an artificial one
    // that is 1 hour in the future. This guarantees the market is open for betting.
    const nowInSeconds = Math.floor(Date.now() / 1000);
    const testEventTimestamp = nowInSeconds + 3600; // 3600 seconds = 1 hour from now

    console.log(`\n*** TESTING NOTE ***`);
    console.log(`Real event time: ${new Date(new Date(`${nextEvent.strTimestamp}+00:00`).getTime()).toUTCString()}`);
    console.log(`Using artificial timestamp for deployment: ${new Date(testEventTimestamp * 1000).toUTCString()}`);
    console.log(`********************\n`);


    return {
        matchId: parseInt(nextEvent.idEvent, 10),
        homeTeamName: nextEvent.strHomeTeam,
        awayTeamName: nextEvent.strAwayTeam,
        eventTimestamp: testEventTimestamp, // Use the artificial future timestamp for testing delpoyment
    };
}


async function main() {
    console.log("--- Step 1: Fetching Next MLB Game Data ---");
    const gameDetails = await fetchNextMlbGame();

    console.log(`Deploying SportsMarket contract...`);
    console.log(`Deploying market for match: ${gameDetails.homeTeamName} vs ${gameDetails.awayTeamName}`);
    console.log(`Match ID: ${gameDetails.matchId}`);
    console.log(`Event Start Timestamp: ${new Date(gameDetails.eventTimestamp * 1000).toUTCString()}`);


    const args: any[] = [
        gameDetails.matchId,
        gameDetails.homeTeamName,
        gameDetails.awayTeamName,
        gameDetails.eventTimestamp
    ];

    const sportsMarket: SportsMarketInstance = await SportsMarket.new(...args);
    
    console.log(`SportsMarket contract deployed to: ${sportsMarket.address} on ${hre.network.name}`);

    // --- Step 3: Updating Configuration File ---
    const configContent = `// This file is auto-generated by deployMarket.ts
// It stores the contract address and match ID for other scripts to use.

export const marketAddress = "${sportsMarket.address}";
export const matchId = ${gameDetails.matchId};
`;
    fs.writeFileSync("scripts/sportsBetting/config.ts", configContent);
    console.log("Configuration file 'scripts/sportsBetting/config.ts' updated successfully.");


    try {
        await run("verify:verify", {
            address: sportsMarket.address,
            constructorArguments: args,
        });
        console.log("Contract verified successfully.");
    } catch (e: any) {
        if (e.message.toLowerCase().includes("already verified")) {
            console.log("Contract is already verified.");
        } else {
            console.error("Error verifying contract:", e.message);
        }
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });